!!ARBvp1.0

# toyball.vp
#
# Generic vertex transformation,
# copy object-space position and 
# light vectors out to interpolants

ATTRIB iPos = vertex.position;       # input position
ATTRIB iNrm = vertex.normal;         # input normal

OUTPUT oPos = result.position;       # output position
OUTPUT oTC0 = result.texcoord[0];    # output texcoord 0: N
OUTPUT oTC1 = result.texcoord[1];    # output texcoord 1: L
OUTPUT oTC2 = result.texcoord[2];    # output texcoord 2: V

PARAM mvp[4] = { state.matrix.mvp }; # model-view * proj matrix
PARAM mv[4] =  { state.matrix.modelview }; # model-view matrix
# inverse transpose of model-view matrix:
PARAM mvIT[4] = { state.matrix.modelview.invtrans }; 

PARAM lightPos = program.local[0];   # light pos in eye space

TEMP V;                              # temporary register

DP4 oPos.x, iPos, mvp[0];            # xform input pos by MVP
DP4 oPos.y, iPos, mvp[1];
DP4 oPos.z, iPos, mvp[2];
DP4 oPos.w, iPos, mvp[3];

DP4 V.x, iPos, mv[0];                # xform input pos by MV
DP4 V.y, iPos, mv[1];
DP4 V.z, iPos, mv[2];
DP4 V.w, iPos, mv[3];

DP3 oTC0.x, iNrm, mvIT[0];           # xform norm to eye space
DP3 oTC0.y, iNrm, mvIT[1];
DP3 oTC0.z, iNrm, mvIT[2];           # put N in texcoord 0

SUB oTC1, lightPos, V;               # light vector in texcoord 1

MOV oTC2, iPos;                      # put objPos in texcoord 2

END
