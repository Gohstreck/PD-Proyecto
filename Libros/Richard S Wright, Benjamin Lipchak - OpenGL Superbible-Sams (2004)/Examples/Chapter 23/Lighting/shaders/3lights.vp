!!ARBvp1.0

# 3lights.vp
#
# setup interpolants for 3 specular lights

ATTRIB iPos = vertex.position;       # input position
ATTRIB iPrC = vertex.color.primary;  # input primary color
ATTRIB iNrm = vertex.normal;         # input normal

OUTPUT oPos = result.position;       # output position
OUTPUT oPrC = result.color.primary;  # output primary color
OUTPUT oTC0 = result.texcoord[0];    # output texcoord 0
OUTPUT oTC1 = result.texcoord[1];    # output texcoord 1
OUTPUT oTC2 = result.texcoord[2];    # output texcoord 2
OUTPUT oTC3 = result.texcoord[3];    # output texcoord 3

PARAM mvp[4] = { state.matrix.mvp }; # model-view * projection matrix
PARAM mv[4] =  { state.matrix.modelview }; # model-view matrix
# inverse transpose of model-view matrix:
PARAM mvIT[4] = { state.matrix.modelview.invtrans }; 

PARAM lightPos0 = program.local[0];  # light pos 0 in eye space
PARAM lightPos1 = program.local[1];  # light pos 1 in eye space
PARAM lightPos2 = program.local[2];  # light pos 2 in eye space

TEMP V;                              # temporary register

DP4 oPos.x, iPos, mvp[0];            # xform input pos by MVP
DP4 oPos.y, iPos, mvp[1];
DP4 oPos.z, iPos, mvp[2];
DP4 oPos.w, iPos, mvp[3];

DP4 V.x, iPos, mv[0];                # xform input pos by MV
DP4 V.y, iPos, mv[1];
DP4 V.z, iPos, mv[2];
DP4 V.w, iPos, mv[3];

DP3 oTC0.x, iNrm, mvIT[0];           # xform norm to eye space
DP3 oTC0.y, iNrm, mvIT[1];
DP3 oTC0.z, iNrm, mvIT[2];           # put N in texcoord 0

SUB oTC1, lightPos0, V;              # light vector 0 in texcoord 1

SUB oTC2, lightPos1, V;              # light vector 1 in texcoord 2

SUB oTC3, lightPos2, V;              # light vector 2 in texcoord 3

MOV oPrC, iPrC;                      # copy primary color in to out

END
