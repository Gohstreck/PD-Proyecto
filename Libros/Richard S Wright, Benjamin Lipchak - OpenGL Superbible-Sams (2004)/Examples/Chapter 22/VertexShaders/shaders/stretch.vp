!!ARBvp1.0

# stretch.vp
#
# Generic vertex transformation,
# followed by squash/stretch

ATTRIB iPos = vertex.position;             # input position
ATTRIB iPrC = vertex.color.primary;        # input primary color
ATTRIB iNrm = vertex.normal;               # input normal

OUTPUT oPos = result.position;             # output position
OUTPUT oPrC = result.color.primary;        # output primary color
OUTPUT oTxC = result.texcoord[0];          # output texcoord 0

PARAM mvp[4] = { state.matrix.mvp };       # model-view * proj matrix
PARAM mv[4] =  { state.matrix.modelview }; # model-view matrix
# inverse transpose of model-view matrix:
PARAM mvIT[4] = { state.matrix.modelview.invtrans }; 

PARAM lightPos = program.local[0];         # light pos in eye space
PARAM squashStretch = program.local[1];    # stretch scale factors

TEMP N, V, L, H, NdotL, NdotH, ssV, ssN;   # temporary registers

MUL ssV, iPos, squashStretch;              # stretch obj-space vertex
MUL ssN, iNrm, squashStretch;              # stretch obj-space normal

DP4 oPos.x, ssV, mvp[0];                   # xform stretch pos by MVP
DP4 oPos.y, ssV, mvp[1];
DP4 oPos.z, ssV, mvp[2];
DP4 oPos.w, ssV, mvp[3];

DP4 V.x, ssV, mv[0];                       # xform stretch pos by MV
DP4 V.y, ssV, mv[1];
DP4 V.z, ssV, mv[2];
DP4 V.w, ssV, mv[3];

SUB L, lightPos, V;                        # vertex to light vector

DP3 N.x, ssN, mvIT[0];                     # xform stretched normal
DP3 N.y, ssN, mvIT[1];
DP3 N.z, ssN, mvIT[2];

DP3 N.w, N, N;                             # normalize normal
RSQ N.w, N.w;
MUL N, N, N.w;

DP3 L.w, L, L;                             # normalize light vector
RSQ L.w, L.w;
MUL L, L, L.w;

ADD H.xyz, L, {0, 0, 1};

DP3 H.w, H, H;                             # normalize half-angle
RSQ H.w, H.w;
MUL H, H, H.w;

DP3 NdotL, N, L;                           # N . L
MAX NdotL, NdotL, 0.0;
MUL oPrC, iPrC, NdotL;                     # output diffuse

DP3 NdotH, N, H;                           # N . H
MAD NdotH.x, NdotH, 8.0, {-7.0};           # (N . H) * 8 - 7
MOV oTxC, {0.0, 0.0, 0.0, 1.0};
MAX oTxC.x, NdotH, 0.0;                    # toss into texcoord 0

END
